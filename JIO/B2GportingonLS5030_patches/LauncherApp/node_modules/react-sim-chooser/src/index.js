import React from 'react';
import BaseComponent from 'base-component';
import ReactOptionMenu from 'react-option-menu';
import Service from 'service';
import SimSettingsHelper from 'sim-settings-helper';
import MobileOperator from 'mobile-operator';
import '../locales/react-sim-chooser.en-US.properties';
import '../locales/react-sim-chooser.es-US.properties';
import '../locales/react-sim-chooser.fr-CA.properties';

export default class ReactSimChooser extends BaseComponent {

  constructor(props) {
    super(props);
    this.state = {
      shown: false
    };
    Service.register('chooseSim', this);
  }

  componentDidUpdate() {
    if (!this.refs.menu) {
      Service.request('focus');
    } else {
      this.refs.menu.show(this.getSimOptions());
      this.refs.menu.on('closed', () => {
        Service.request('focus');
      });
    }
  }

  capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  chooseSim(target = 'call') {
    this.lastActive = document.activeElement;
    return new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;

      SimSettingsHelper.getCardIndexFrom(`outgoing${this.capitalize(target)}`, (ci) => {
        if (this.hasOnlyOneSIMCardDetected()) {
          var index = this.isSIMCardAbsent(0) ? 1 : 0;
          this.resolve(index);
        } else if (this.noSIMCardOnDevice()) {
          // Emergency call
          this.resolve(0);
        } else if (ci === SimSettingsHelper.ALWAYS_ASK_OPTION_VALUE) {
          this.setState({
            shown: true
          });
        } else {
          this.resolve(ci);
        }
      });
    });
  }

  getSimCardByIndex(index) {
    const conn = navigator.mozMobileConnections[index];
    if (!conn) {
      return;
    }
    const operator = MobileOperator.userFacingInfo(conn).operator;
    const number = index + 1;
    return {
      id: (operator ? 'sim-with-index-and-carrier' : 'sim-without-carrier'),
      l10nArgs: JSON.stringify({
        carrier: (operator ? operator : null),
        index: number
      }),
      label: `SIM ${number}`,
      callback: () => {
        this.resolve(index);
        this.onCancel();
        this.resolve = null;
        this.reject = null;
      }
    };
  }

  getSimOptions() {
    return {
      header: 'select',
      options: [
        this.getSimCardByIndex(0),
        this.getSimCardByIndex(1)
      ],
      onCancel: () => {
        this.reject();
        this.onCancel();
        this.resolve = null;
        this.reject = null;
      }
    };
  }

  onCancel() {
    this.focusLast();
  }

  focusLast() {
    if (this.lastActive) {
      this.lastActive.focus();
      this.lastActive = null;
    }
  }

  /**
   * Check there is sim card on slot#index or not.
   * @param  {Number}  index The slot number.
   * @return {Boolean} sim card is absent or not.
   */
  isSIMCardAbsent(index) {
    var IccManager = navigator.mozIccManager;
    var conn = navigator.mozMobileConnections[index];
    if (!IccManager || !conn) {
      return true;
    }
    var simCard = IccManager.getIccById(conn.iccId);

    return (!simCard ||
      simCard && simCard.iccInfo &&
      simCard.iccInfo.iccid === null);
  }

  /**
   * Make sure we really have one simcard information
   * @return {Boolean} we already have one simcard.
   * TODO This only consider 2 slot case.
   *      Should extend it for multi-sim case.
   */
  hasOnlyOneSIMCardDetected() {
    var sim0Absent = this.isSIMCardAbsent(0);
    var sim1Absent = this.isSIMCardAbsent(1);
    var hasOneSim = sim0Absent ^ sim1Absent; // XOR operator
    return hasOneSim;
  }

  /**
   * Check there is no any sim card on device or not.
   * @return {Boolean} There is no sim card.
   */
  noSIMCardOnDevice() {
    var IccManager = navigator.mozIccManager;
    if (!IccManager || !IccManager.iccIds) {
      return true;
    }
    return (IccManager.iccIds.length === 0);
  }

  render() {
    return (
      <div>
        {this.state.shown ? <ReactOptionMenu ref="menu" /> : null}
      </div>
    );
  }
}
