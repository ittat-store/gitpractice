import BaseModule from 'base-module';
import SIMSlot from './simslot';

const IccManager = navigator.mozIccManager;
/**
 * SIMSlotManager creates/manages the current SIM slot on the device.
 */
class SIMSlotManager extends BaseModule {
  /**
   * The number of SIM slots.
   * @type {Number}
   */
  length = 0;
  _instances = [];

  /**
   * The timeout to wait for the second SIM
   * @type {Number}
   */
  TIMEOUT_FOR_SIM2 = 2000;

  /**
   * Timer used to wait for the second SIM
   * @type {Number} timeoutId
   */
  _timerForSIM2 = null;

  /**
   * This property is used to make sure sim_lock won't get inited
   * before we receive iccdetected when bootup.
   * @type {Boolean}
   */
  ready = false;

  start() {
    if (!IccManager) {
      return;
    }

    this._conns = Array.prototype.slice.call(navigator.mozMobileConnections);
    this.length = this._conns.length;

    if (0 === this._conns.length) {
      return;
    }

    this._conns.forEach(function iterator(conn, index) {
      this._instances.push(new SIMSlot(conn, index,
                           IccManager.getIccById(conn.iccId)));
    }, this);

    if (IccManager.iccIds.length === this.getInsertedCardCount()) {
      this.publishSIMSlotIsReady();
    }
    IccManager.addEventListener('iccdetected', this);
  }

  getInsertedCardCount() {
    let count = 0;
    this._conns.forEach((conn, index) => {
      if (!this.isSIMCardAbsent(index)) {
        count++;
      }
    });
    return count;
  }

  /**
   * We support multiSIM or not.
   * @return {Boolean} MultiSIM is available or not.
   */
  isMultiSIM() {
    return (this.length > 1);
  }

  /**
   * Check there is sim card on slot#index or not.
   * @param  {Number}  index The slot number.
   * @return {Boolean}       sim card is absent or not.
   */
  isSIMCardAbsent(index) {
    var slot = this.get(index);
    if (slot) {
      return slot.isAbsent();
    } else {
      return true;
    }
  }

  /**
   * Make sure we really have one simcard information
   * @return {Boolean} we already have one simcard.
   */
  hasOnlyOneSIMCardDetected() {
    var sim0Absent = this.isSIMCardAbsent(0);
    var sim1Absent = this.isSIMCardAbsent(1);
    var hasOneSim =
      (sim0Absent && !sim1Absent) || (!sim0Absent && sim1Absent);
    return hasOneSim;
  }

  /**
   * Check there is no any sim card on device or not.
   * @return {Boolean} There is no sim card.
   */
  noSIMCardOnDevice() {
    if (!IccManager || !IccManager.iccIds) {
      return true;
    }
    return (0 === IccManager.iccIds.length);
  }

  noSIMCardConnectedToNetwork() {
    if (!IccManager || !IccManager.iccIds) {
      return true;
    }
    return this._instances.every((instance) => {
      return instance.conn.voice && instance.conn.voice.emergencyCallsOnly;
    });
  }

  /**
   * Get specific SIM slot instance.
   * @param {Number} index The slot number.
   * @return {Object} The SIMSlot instance.
   */
  get(index) {
    if (index > this.length - 1) {
      return null;
    }

    return this._instances[index];
  }

  /**
   * Get specific mobileConnection object.
   * @param {Number} index The slot number.
   * @return {Object} The mobile connection object.
   */
  getMobileConnection(index) {
    if (index > this.length - 1) {
      return null;
    }

    return this._instances[index].conn;
  }

  /**
   * Get all sim slot instances
   * @return {Array} The array of sim slot instances.
   */
  getSlots() {
    return this._instances;
  }

  /**
   * Get specified simslot by iccId
   * @return {Object} The SIMSlot instance.
   */
  getSlotByIccId(iccId) {
    var found = null;
    this._instances.some((slot) => {
      if (slot.conn.iccId && slot.conn.iccId === iccId) {
        found = slot;
        return true;
      } else {
        return false;
      }
    }, this);
    return found;
  }

  /**
   * This method is used to make sure if we can't receive the 2nd
   * `iccdetected` event during the timeout, we would treat this
   * situation as DSDS device with only one simcard inserted.
   */
  waitForSecondSIM() {
    this._timerForSIM2 = setTimeout(() => {
      clearTimeout(this._timerForSIM2);
      this.publishSIMSlotIsReady();
    }, this.TIMEOUT_FOR_SIM2);
  }

  /**
   * We have to make sure our simcards are ready and emit
   * this event out to notify sim_settings_helper & sim_lock
   * do related operations.
   */
  publishSIMSlotIsReady() {
    if (!this.ready) {
      this.ready = true;
      window.dispatchEvent(new CustomEvent('simslotready'));
    }
  }

  _handle_iccdetected(evt) {
    let slot = this.getSlotByIccId(evt.iccId);

    if (slot) {
      slot.update(IccManager.getIccById(evt.iccId));

      // we are now in single sim device
      if (!this.isMultiSIM()) {
        this.publishSIMSlotIsReady();
      } else if (this.hasOnlyOneSIMCardDetected()) {
        // we are now in DSDS device
        // if we have one simcard already
        this.waitForSecondSIM();
      } else {
        // we have two simcards already
        clearTimeout(this._timerForSIM2);
        this.publishSIMSlotIsReady();
      }
    }
  }
}

const simslotManager = new SIMSlotManager();
simslotManager.start();

export default simslotManager;
