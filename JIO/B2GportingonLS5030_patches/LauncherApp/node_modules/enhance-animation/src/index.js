import React from 'react';
import ReactDOM from 'react-dom';
import ReactAnimationComposer from 'react-animation-composer';
import BaseComponent from 'base-component';
import Service from 'service';
import PopupManager from './popup_manager';
import '../scss/index.scss';

const EnhanceAnimation = (ComposedComponent, open, close) => class extends BaseComponent {
  name = `EnhanceAnimation-${ComposedComponent.name}`;
  DEBUG = false;

  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.debug('did mount:', ComposedComponent.name);
    this.refs.composed.open = this.refs.composing.open.bind(this.refs.composing);
    this.refs.composed.close = this.refs.composing.close.bind(this.refs.composing);
    Service.register('open', this.refs.composed);
    Service.register('close', this.refs.composed);
    this.refs.composed.isActive = this.refs.composing.isActive.bind(this.refs.composing);

    this.refs.composing.on('closed', () => {
      this.refs.composed.emit('closed');
      this.emit('closed');
    });
    this.refs.composing.on('opened', () => {
      this.refs.composed.emit('opened');
      this.emit('opened');
    });
  }

  open(animation) {
    this.refs.composing.open(animation);
  }

  focus() {
    let dom = ReactDOM.findDOMNode(this.refs.composed);
    if (dom.activeElement) {
      // XXX: This is a hack. We expect SimpleNavigationHelper to update this value for us.
      dom.activeElement.focus();
      // XXX: If the focus to cached active element fail, focus the dom again.
      if (document.activeElement === document.body) {
        dom.focus();
      }
    } else {
      dom.focus();
    }
  }

  close(animation) {
    this.refs.composing.close(animation);
  }

  isClosed() {
    return 'closed' === this.refs.composing.state.transition;
  }

  isTransitioning() {
    const popupTransitioning = this.refs.popup && this.refs.popup.isOpening;
    const result = this.refs.composing.isTransitioning() || popupTransitioning;

    this.debug('isTransitioning: popupTransitioning, result:', popupTransitioning, result);
    return result;
  }

  getTopMost() {
    return this.refs.popup.refs.popup ? this.refs.popup.refs.popup.getTopMost() : this;
  }

  openPopup(popup) {
    this.refs.popup.setPanel(popup);
  }

  componentDidUpdate() {
    this.refs.popup && this.refs.popup.open();
  }

  render() {
    return (
      <ReactAnimationComposer ref="composing" openAnimation={open} closeAnimation={close}>
        <ComposedComponent ref="composed" {...this.props} />
        <PopupManager ref="popup" />
      </ReactAnimationComposer>
    );
  }
};

export default EnhanceAnimation;
