import React from 'react';
import ReactDOM from 'react-dom';
import BaseComponent from 'base-component';

class PopupManager extends BaseComponent {
  name = 'PopupManager';
  DEBUG = false;

  isOpening = false;

  constructor(props) {
    super(props);
    this.state = {
      panel: null
    };
  }

  componentDidMount() {
    this.debug('did mount');
  }

  setPanel(panel) {
    this.isOpening = true;
    this.setState({
      panel
    });
  }

  focus() {
    ReactDOM.findDOMNode(this.refs.composed).focus();
  }

  open(animation) {
    this.refs.popup && this.refs.popup.open(animation);
  }

  componentDidUpdate() {
    this.debug('did update');
    if (!this.refs.popup) {
      return;
    }
    this.refs.popup.open('bottom-to-up');
    this.refs.popup.refs.composing.on('opened', () => {
      this.isOpening = false;
    });
    this.refs.popup.refs.composed.close = this.close.bind(this);
    // To avoid race condition, we need to unset the popup ASAP it's closing.
    this.refs.popup.refs.composing.on('closing', () => {
      this.setState({
        panel: null
      });
    });
  }

  render() {
    let popup = this.state.panel ?
                React.cloneElement(this.state.panel, { ref: 'popup' }) : null;
    return (
      <div className="popup">
        {popup}
      </div>
    );
  }
}

export default PopupManager;
